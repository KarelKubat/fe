How to embed fe's encryption logic in your own programs
-------------------------------------------------------

In order to embed fe's logic into your C programs, you will need to
include fe.h in your source, and you'll need to link against the
shared library (libfe.so or libfe.dylib). On some systems you'll also
need to include libdl.a, the dynamic loader interface.


1. Including fe.h:

Make sure that you copy fe.h from the source archive to your "include"
directory, e.g., to /usr/local/include. When compiling, add the
appropriate flag -I, as in:
    cc -c -I /usr/local/include myprog.c


2. The API

The API is fairly straight-forward:
- You obtain a "context" for fe's functions, using fe_setup()
- You add file targets to the context using fe_target_add()

The first function fe_setup() takes 4 parameters:
- A user-supplied transcryption secret
- Verbosity: 1 or 0. When non-0, fe will generate debugging messages
- Verbose messages destination: this is either dst_syslog or dst_stderr,
  depending on where you want to see the debug messages
- Should non-supported functions such as fscanf() be ignored or should fe
  abort? This is a boolean flag, 1 to ignore, 0 to abort.
The function returns a pointer to a context.

The second function fe_target_add() takes 2 parameters:
- A pointer to the context, obtained using fe_setup()
- A string, which is the name of a file to treat as transcryption target.

Example:
    #include <fe.h>			// header inclusion
    
    FeCtx *ctx;				// the context ptr

    ctx = fe_setup("user secret",	// transcryption key
                   1,                   // verbosity: ON
		   dst_syslog,          // verbose messages to syslog
                   0);			// abort when unsupported
		   			// functions are seen

    fe_target_add(ctx, "/tmp/myfile");	// add a target
    fe_target_add(ctx, "~/secret.txt");	// add another target

After this, the standard functions can be used to open, read, write
and close files. Assuming they are marked as targets, fe will
transcrypt buffers before committing to disk, or it will transcrypt
buffers that are read from disk before returning to the caller.


3. Linkage

Make sure to add -L (for library location) and -l (for library name)
during the linkage phase, as in:
    cc -o myprog myprog.o -L/usr/local/lib -lfe  
On some systems, notably Linux, you will also need -ldl:
    cc -o myprog myprog.o -L/usr/local/lib -lfe -ldl
